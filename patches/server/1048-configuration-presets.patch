From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tamion <70228790+notTamion@users.noreply.github.com>
Date: Sat, 25 May 2024 19:48:31 +0200
Subject: [PATCH] configuration presets


diff --git a/src/main/java/io/papermc/paper/configuration/Configurations.java b/src/main/java/io/papermc/paper/configuration/Configurations.java
index 96142deb42700f888ea08689ab62c27ef2b881fd..63bf43043efd0f0638dc6fc2c2583535c9d9a638 100644
--- a/src/main/java/io/papermc/paper/configuration/Configurations.java
+++ b/src/main/java/io/papermc/paper/configuration/Configurations.java
@@ -24,6 +24,8 @@ import org.spongepowered.configurate.yaml.YamlConfigurationLoader;
 
 import java.io.IOException;
 import java.lang.reflect.Type;
+import java.net.URISyntaxException;
+import java.net.URL;
 import java.nio.file.AccessDeniedException;
 import java.nio.file.Files;
 import java.nio.file.Path;
@@ -38,6 +40,7 @@ public abstract class Configurations<G, W> {
     private static final Logger LOGGER = LogUtils.getClassLogger();
     public static final String WORLD_DEFAULTS = "__world_defaults__";
     public static final ResourceLocation WORLD_DEFAULTS_KEY = new ResourceLocation("configurations", WORLD_DEFAULTS);
+    private static final String CONFIGURATION_PRESET = System.getProperty("paper.configurationPreset");
     protected final Path globalFolder;
     protected final Class<G> globalConfigClass;
     protected final Class<W> worldConfigClass;
@@ -135,6 +138,16 @@ public abstract class Configurations<G, W> {
             this.verifyGlobalConfigVersion(node);
         }
         this.applyGlobalConfigTransformations(node);
+        if (CONFIGURATION_PRESET != null) {
+            URL globalPreset = this.getClass().getClassLoader().getResource("configurations/presets/" + CONFIGURATION_PRESET + "/paper-global.yml");
+            if (globalPreset != null) {
+                try {
+                    node.mergeFrom(YamlConfigurationLoader.builder().path(Path.of(globalPreset.toURI())).build().load());
+                } catch (URISyntaxException e) {
+                    throw new RuntimeException(e);
+                }
+            }
+        }
         final G instance = creator.apply(node);
         trySaveFileNode(loader, node, configFile.toString());
         return instance;
@@ -175,6 +188,16 @@ public abstract class Configurations<G, W> {
             this.verifyWorldConfigVersion(contextMap, node);
         }
         this.applyWorldConfigTransformations(contextMap, node, null);
+        if (CONFIGURATION_PRESET != null) {
+            URL globalPreset = this.getClass().getClassLoader().getResource("configurations/presets/" + CONFIGURATION_PRESET + "/paper-global.yml");
+            if (globalPreset != null) {
+                try {
+                    node.mergeFrom(YamlConfigurationLoader.builder().path(Path.of(globalPreset.toURI())).build().load());
+                } catch (URISyntaxException e) {
+                    throw new RuntimeException(e);
+                }
+            }
+        }
         final W instance = node.require(this.worldConfigClass);
         node.set(this.worldConfigClass, instance);
         this.trySaveFileNode(loader, node, configFile.toString());
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 244a19ecd0234fa1d7a6ecfea20751595688605d..6d332f40b0fd4f73eadc57f0f34e3fcdef675b26 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -130,6 +130,11 @@ public class Main {
             RegionFileVersion.configure(dedicatedserversettings.getProperties().regionFileComression);
             Path path2 = Paths.get("eula.txt");
             Eula eula = new Eula(path2);
+
+            String configurationPreset = System.getProperty("paper.configurationPreset");
+            if (configurationPreset != null && Main.class.getClassLoader().getResource("configurations/presets" + configurationPreset) == null)
+                throw new IllegalArgumentException("Can't find configuration preset \"" + configurationPreset + "\"");
+
             // Paper start - load config files early for access below if needed
             org.bukkit.configuration.file.YamlConfiguration bukkitConfiguration = io.papermc.paper.configuration.PaperConfigurations.loadLegacyConfigFile((File) optionset.valueOf("bukkit-settings"));
             org.bukkit.configuration.file.YamlConfiguration spigotConfiguration = io.papermc.paper.configuration.PaperConfigurations.loadLegacyConfigFile((File) optionset.valueOf("spigot-settings"));
@@ -140,7 +145,13 @@ public class Main {
                 File configFile = (File) optionset.valueOf("bukkit-settings");
                 YamlConfiguration configuration = YamlConfiguration.loadConfiguration(configFile);
                 configuration.options().copyDefaults(true);
-                configuration.setDefaults(YamlConfiguration.loadConfiguration(new InputStreamReader(Main.class.getClassLoader().getResourceAsStream("configurations/bukkit.yml"), Charsets.UTF_8)));
+                if (configurationPreset == null || Main.class.getClassLoader().getResource("configurations/presets" + configurationPreset + "/bukkit.yml") == null) {
+                    configuration.setDefaults(YamlConfiguration.loadConfiguration(new InputStreamReader(Main.class.getClassLoader().getResourceAsStream("configurations/bukkit.yml"), Charsets.UTF_8)));
+                } else {
+                    YamlConfiguration defaultConfig = YamlConfiguration.loadConfiguration(new InputStreamReader(Main.class.getClassLoader().getResourceAsStream("configurations/presets/" + configurationPreset + "/bukkit.yml"), Charsets.UTF_8));
+                    defaultConfig.setDefaults(YamlConfiguration.loadConfiguration(new InputStreamReader(Main.class.getClassLoader().getResourceAsStream("configurations/bukkit.yml"), Charsets.UTF_8)));
+                    configuration.setDefaults(defaultConfig);
+                }
                 configuration.save(configFile);
 
                 File commandFile = (File) optionset.valueOf("commands-settings");
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index af015237214cebc4d1c4bb9e9c5f939d433e365c..fc18e894bc030bb02b4ef9e59d5ad3ba398136aa 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -414,7 +414,14 @@ public final class CraftServer implements Server {
 
         this.configuration = YamlConfiguration.loadConfiguration(this.getConfigFile());
         this.configuration.options().copyDefaults(true);
-        this.configuration.setDefaults(YamlConfiguration.loadConfiguration(new InputStreamReader(this.getClass().getClassLoader().getResourceAsStream("configurations/bukkit.yml"), Charsets.UTF_8)));
+        String configurationPreset = System.getProperty("paper.configurationPreset");
+        if (configurationPreset == null || Main.class.getClassLoader().getResource("configurations/presets" + configurationPreset + "/bukkit.yml") == null) {
+            configuration.setDefaults(YamlConfiguration.loadConfiguration(new InputStreamReader(Main.class.getClassLoader().getResourceAsStream("configurations/bukkit.yml"), Charsets.UTF_8)));
+        } else {
+            YamlConfiguration defaultConfig = YamlConfiguration.loadConfiguration(new InputStreamReader(Main.class.getClassLoader().getResourceAsStream("configurations/presets/" + configurationPreset + "/bukkit.yml"), Charsets.UTF_8));
+            defaultConfig.setDefaults(YamlConfiguration.loadConfiguration(new InputStreamReader(Main.class.getClassLoader().getResourceAsStream("configurations/bukkit.yml"), Charsets.UTF_8)));
+            configuration.setDefaults(defaultConfig);
+        }
         ConfigurationSection legacyAlias = null;
         if (!this.configuration.isString("aliases")) {
             legacyAlias = this.configuration.getConfigurationSection("aliases");
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 6c2a3813e7d63d57f07a8fa2edbb9d231221d818..30fa9976b22bec55d2151c4eb2a53843c7c4d758 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -1,8 +1,10 @@
 package org.spigotmc;
 
+import com.google.common.base.Charsets;
 import com.google.common.base.Throwables;
 import java.io.File;
 import java.io.IOException;
+import java.io.InputStreamReader;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
@@ -121,6 +123,12 @@ public class SpigotConfig
             }
         }
         // Paper start
+        String configurationPreset = System.getProperty("paper.configurationPreset");
+        if (configurationPreset != null && SpigotConfig.class.getClassLoader().getResource("configurations/presets" + configurationPreset + "/spigot.yml") != null) {
+            YamlConfiguration defaultConfig = YamlConfiguration.loadConfiguration(new InputStreamReader(SpigotConfig.class.getClassLoader().getResourceAsStream("configurations/presets/" + configurationPreset + "/bukkit.yml"), Charsets.UTF_8));
+            defaultConfig.setDefaults(config.getDefaults());
+            config.setDefaults(defaultConfig);
+        }
         SpigotConfig.save();
     }
     public static void save() {
diff --git a/src/main/resources/configurations/presets/vanilla/paper-global.yml b/src/main/resources/configurations/presets/vanilla/paper-global.yml
new file mode 100644
index 0000000000000000000000000000000000000000..c345ce25924d2d7021cf10a49d33ea63ff3a1c1b
--- /dev/null
+++ b/src/main/resources/configurations/presets/vanilla/paper-global.yml
@@ -0,0 +1,9 @@
+packet-limiter:
+unsupported-settings:
+  allow-headless-pistons: true
+  allow-permanent-block-break-exploits: true
+  allow-piston-duplication: true
+  perform-username-validation: false
+  allow-grindstone-overstacking: true
+  allow-unsafe-end-portal-teleportation: true
+  allow-tripwire-disarming-exploits: true
diff --git a/src/main/resources/configurations/presets/vanilla/paper-world-defaults.yml b/src/main/resources/configurations/presets/vanilla/paper-world-defaults.yml
new file mode 100644
index 0000000000000000000000000000000000000000..ca49da490d590f6c9c92d90494c9fc5f64618e1f
--- /dev/null
+++ b/src/main/resources/configurations/presets/vanilla/paper-world-defaults.yml
@@ -0,0 +1,20 @@
+chunks:
+  delay-chunk-unloads-by: 0s
+  max-auto-save-chunks-per-tick: 200
+collisions:
+  allow-player-cramming-damage: true
+  max-entity-collisions: 2147483647
+entities:
+  behavior:
+    phantoms-do-not-spawn-on-creative-players: false
+    phantoms-only-attack-insomniacs: false
+  spawning:
+    count-all-mobs-for-spawning: true
+    per-player-mob-spawns: false
+fixes:
+  disable-unloaded-chunk-enderpearl-exploit: false
+hopper:
+  cooldown-when-full: false
+unsupported-settings:
+  disable-world-ticking-when-empty: true
+  fix-invulnerable-end-crystal-exploit: false
diff --git a/src/main/resources/configurations/presets/vanilla/spigot.yml b/src/main/resources/configurations/presets/vanilla/spigot.yml
new file mode 100644
index 0000000000000000000000000000000000000000..33342b40a2d6f222bc2875b17685ec3a8536dfe1
--- /dev/null
+++ b/src/main/resources/configurations/presets/vanilla/spigot.yml
@@ -0,0 +1,14 @@
+world-settings:
+  default:
+    merge-radius:
+      item: 0.5
+      exp: 0.5
+    entity-activation-range:
+      animals: 0
+      monsters: 0
+      raiders: 0
+      misc: 0
+      water: 0
+      villagers: 0
+      flying-monsters: 0
+    max-tnt-per-tick: 0
